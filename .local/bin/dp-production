#!/usr/bin/env bash

. ~/.certmanrc

export DEPLOY_ENV='production'
export ASG=$MYFINANCE_ASG_PRODUCTION
export ASG_MIN_SIZE=3
export ASG_MAX_SIZE=3
export ASG_DESIRED_CAPACITY=3
export BRANCH="deploy"
export ELB=$MYFINANCE_ELB_PRODUCTION
export DEFAULT_ASG_MIN_SIZE=2
export DEFAULT_ASG_MAX_SIZE=6
export DEFAULT_ASG_DESIRED_CAPACITY=2

export msg="@here fazendo deploy do app myfinance para $DEPLOY_ENV a partir do branch $(git rev-parse --symbolic-full-name --abbrev-ref HEAD) em $(git rev-parse HEAD)"
echo $msg | xclip -selection clipboard
read -p "AVISE: $msg"

as-update-auto-scaling-group $ASG --min-size $ASG_MIN_SIZE --max-size $ASG_MAX_SIZE --desired-capacity $ASG_DESIRED_CAPACITY --health-check-type EC2 &&
  read -r -p "Wait until instance(IN SERVICE) count be satisfied..."

# echo "Instance count: " &&
# read INSTANCE_COUNT

for i in `seq 1 $ASG_MAX_SIZE`;
do
  echo "Enter instance $i: " &&
    read DEPLOY_INSTANCE_$i
done

cd $CERTMAN_HOME
source .envrc
source bin/activate
cd src


fab $DEPLOY_ENV asg:$ASG deploy:$MYFINANCE_HOME,branch=$BRANCH &&
  cd $MYFINANCE_HOME/src &&
  ec2ssh $DEPLOY_INSTANCE_1 'for i in /etc/init/application-work-*; do NAME=$(basename $i); sudo initctl stop ${NAME%.conf}; done' &&
  rds-create-db-snapshot myfinance-postgres-production --db-snapshot-identifier myfinance-$(echo "puts Time.now.utc.strftime('%Y%m%d%H%M%S%Z')" | ruby) &&
  as-terminate-instance-in-auto-scaling-group $DEPLOY_INSTANCE_1 --no-decrement-desired-capacity --force &&
  echo "Enter the new instance: " &&
  read NEW_INSTANCE &&
  ec2log $NEW_INSTANCE

read -r -p "All instances are in service at Load Balance ? [Y/n] " response

if [[ $response =~ ^([nN][oO]|[nN])$ ]]
then
  exit 0
fi

ec2ssh $DEPLOY_INSTANCE_2 'for i in /etc/init/application-work-*; do NAME=$(basename $i); sudo initctl stop ${NAME%.conf}; done' &&
  ec2ssh $DEPLOY_INSTANCE_3 'for i in /etc/init/application-work-*; do NAME=$(basename $i); sudo initctl stop ${NAME%.conf}; done'

cd $CERTMAN_HOME &&
  source .envrc &&
  . bin/activate &&
  cd src && fab freeze:$NEW_INSTANCE

read -r -p "Siga em frente se o freeze estiver OK. Tecle enter para prosseguir."

cd $MYFINANCE_HOME/src &&
  as-terminate-instance-in-auto-scaling-group $DEPLOY_INSTANCE_2 --no-decrement-desired-capacity --force &&
  as-terminate-instance-in-auto-scaling-group $DEPLOY_INSTANCE_3 --no-decrement-desired-capacity --force

read -r -p "Finish the deploy (all instances are OK) ? [Y/n] " response

if [[ $response =~ ^([nN][oO]|[nN])$ ]]
then
  exit 0
fi

as-update-auto-scaling-group $ASG --min-size $DEFAULT_ASG_MIN_SIZE --max-size $DEFAULT_ASG_MAX_SIZE --desired-capacity $DEFAULT_ASG_DESIRED_CAPACITY --health-check-type ELB --grace-period 600 --default-cooldown 300
curl https://api.rollbar.com/api/1/deploy/ \
  -F access_token=3e33dfb922a74fdda83584a0ddb2b4f6 \
  -F environment=$DEPLOY_ENV \
  -F revision=`git log -n 1 --pretty=format:"%h"` \
  -F local_username=`whoami`

read -r -p "Link para o RELEASE:  " release
msg="@here deploy do app myfinance para $DEPLOY_ENV a partir do branch $BRANCH terminado, release: $release"
echo $msg | xclip -selection clipboard
read -r -p "AVISE: $msg"

echo "DONE!"
